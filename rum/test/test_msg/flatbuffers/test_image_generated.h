// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TESTIMAGE_RUM_TEST_MSG_H_
#define FLATBUFFERS_GENERATED_TESTIMAGE_RUM_TEST_MSG_H_

#include "flatbuffers/flatbuffers.h"

namespace rum {
namespace test {
namespace msg {

struct Image;
struct ImageBuilder;

struct Image FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ImageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FRAME_ID = 4,
    VT_W = 6,
    VT_H = 8,
    VT_FORMAT = 10,
    VT_DATA = 12
  };
  int32_t frame_id() const {
    return GetField<int32_t>(VT_FRAME_ID, 0);
  }
  uint32_t w() const {
    return GetField<uint32_t>(VT_W, 0);
  }
  uint32_t h() const {
    return GetField<uint32_t>(VT_H, 0);
  }
  const flatbuffers::String *format() const {
    return GetPointer<const flatbuffers::String *>(VT_FORMAT);
  }
  const flatbuffers::Vector<int8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_FRAME_ID) &&
           VerifyField<uint32_t>(verifier, VT_W) &&
           VerifyField<uint32_t>(verifier, VT_H) &&
           VerifyOffset(verifier, VT_FORMAT) &&
           verifier.VerifyString(format()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct ImageBuilder {
  typedef Image Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_frame_id(int32_t frame_id) {
    fbb_.AddElement<int32_t>(Image::VT_FRAME_ID, frame_id, 0);
  }
  void add_w(uint32_t w) {
    fbb_.AddElement<uint32_t>(Image::VT_W, w, 0);
  }
  void add_h(uint32_t h) {
    fbb_.AddElement<uint32_t>(Image::VT_H, h, 0);
  }
  void add_format(flatbuffers::Offset<flatbuffers::String> format) {
    fbb_.AddOffset(Image::VT_FORMAT, format);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<int8_t>> data) {
    fbb_.AddOffset(Image::VT_DATA, data);
  }
  explicit ImageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ImageBuilder &operator=(const ImageBuilder &);
  flatbuffers::Offset<Image> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Image>(end);
    return o;
  }
};

inline flatbuffers::Offset<Image> CreateImage(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t frame_id = 0,
    uint32_t w = 0,
    uint32_t h = 0,
    flatbuffers::Offset<flatbuffers::String> format = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> data = 0) {
  ImageBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_format(format);
  builder_.add_h(h);
  builder_.add_w(w);
  builder_.add_frame_id(frame_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Image> CreateImageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t frame_id = 0,
    uint32_t w = 0,
    uint32_t h = 0,
    const char *format = nullptr,
    const std::vector<int8_t> *data = nullptr) {
  auto format__ = format ? _fbb.CreateString(format) : 0;
  auto data__ = data ? _fbb.CreateVector<int8_t>(*data) : 0;
  return rum::test::msg::CreateImage(
      _fbb,
      frame_id,
      w,
      h,
      format__,
      data__);
}

inline const rum::test::msg::Image *GetImage(const void *buf) {
  return flatbuffers::GetRoot<rum::test::msg::Image>(buf);
}

inline const rum::test::msg::Image *GetSizePrefixedImage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<rum::test::msg::Image>(buf);
}

inline bool VerifyImageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<rum::test::msg::Image>(nullptr);
}

inline bool VerifySizePrefixedImageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<rum::test::msg::Image>(nullptr);
}

inline void FinishImageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<rum::test::msg::Image> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedImageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<rum::test::msg::Image> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace msg
}  // namespace test
}  // namespace rum

#endif  // FLATBUFFERS_GENERATED_TESTIMAGE_RUM_TEST_MSG_H_
