// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TESTPOINT_RUM_TEST_MSG_H_
#define FLATBUFFERS_GENERATED_TESTPOINT_RUM_TEST_MSG_H_

#include "flatbuffers/flatbuffers.h"

namespace rum {
namespace test {
namespace msg {

struct PointStruct;

struct PointTable;
struct PointTableBuilder;

struct Point;
struct PointBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) PointStruct FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;
  double z_;

 public:
  PointStruct() {
    memset(static_cast<void *>(this), 0, sizeof(PointStruct));
  }
  PointStruct(double _x, double _y, double _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  double x() const {
    return flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return flatbuffers::EndianScalar(y_);
  }
  double z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(PointStruct, 24);

struct PointTable FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PointTableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  double x() const {
    return GetField<double>(VT_X, 0.0);
  }
  double y() const {
    return GetField<double>(VT_Y, 0.0);
  }
  double z() const {
    return GetField<double>(VT_Z, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_X) &&
           VerifyField<double>(verifier, VT_Y) &&
           VerifyField<double>(verifier, VT_Z) &&
           verifier.EndTable();
  }
};

struct PointTableBuilder {
  typedef PointTable Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(double x) {
    fbb_.AddElement<double>(PointTable::VT_X, x, 0.0);
  }
  void add_y(double y) {
    fbb_.AddElement<double>(PointTable::VT_Y, y, 0.0);
  }
  void add_z(double z) {
    fbb_.AddElement<double>(PointTable::VT_Z, z, 0.0);
  }
  explicit PointTableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PointTableBuilder &operator=(const PointTableBuilder &);
  flatbuffers::Offset<PointTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PointTable>(end);
    return o;
  }
};

inline flatbuffers::Offset<PointTable> CreatePointTable(
    flatbuffers::FlatBufferBuilder &_fbb,
    double x = 0.0,
    double y = 0.0,
    double z = 0.0) {
  PointTableBuilder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct Point FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PointBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POINT = 4
  };
  const rum::test::msg::PointStruct *point() const {
    return GetStruct<const rum::test::msg::PointStruct *>(VT_POINT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<rum::test::msg::PointStruct>(verifier, VT_POINT) &&
           verifier.EndTable();
  }
};

struct PointBuilder {
  typedef Point Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_point(const rum::test::msg::PointStruct *point) {
    fbb_.AddStruct(Point::VT_POINT, point);
  }
  explicit PointBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PointBuilder &operator=(const PointBuilder &);
  flatbuffers::Offset<Point> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Point>(end);
    return o;
  }
};

inline flatbuffers::Offset<Point> CreatePoint(
    flatbuffers::FlatBufferBuilder &_fbb,
    const rum::test::msg::PointStruct *point = 0) {
  PointBuilder builder_(_fbb);
  builder_.add_point(point);
  return builder_.Finish();
}

inline const rum::test::msg::PointTable *GetPointTable(const void *buf) {
  return flatbuffers::GetRoot<rum::test::msg::PointTable>(buf);
}

inline const rum::test::msg::PointTable *GetSizePrefixedPointTable(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<rum::test::msg::PointTable>(buf);
}

inline bool VerifyPointTableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<rum::test::msg::PointTable>(nullptr);
}

inline bool VerifySizePrefixedPointTableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<rum::test::msg::PointTable>(nullptr);
}

inline void FinishPointTableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<rum::test::msg::PointTable> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPointTableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<rum::test::msg::PointTable> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace msg
}  // namespace test
}  // namespace rum

#endif  // FLATBUFFERS_GENERATED_TESTPOINT_RUM_TEST_MSG_H_
