// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_number.proto

#include "test_number.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace rum {
namespace test {
namespace proto {
constexpr Number::Number(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : n1_(0)
  , n2_(0)
  , l1_(uint64_t{0u})
  , l2_(uint64_t{0u})
  , d1_(0)
  , d2_(0){}
struct NumberDefaultTypeInternal {
  constexpr NumberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NumberDefaultTypeInternal() {}
  union {
    Number _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NumberDefaultTypeInternal _Number_default_instance_;
}  // namespace proto
}  // namespace test
}  // namespace rum
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_test_5fnumber_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_test_5fnumber_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_test_5fnumber_2eproto = nullptr;

const uint32_t TableStruct_test_5fnumber_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rum::test::proto::Number, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rum::test::proto::Number, n1_),
  PROTOBUF_FIELD_OFFSET(::rum::test::proto::Number, n2_),
  PROTOBUF_FIELD_OFFSET(::rum::test::proto::Number, l1_),
  PROTOBUF_FIELD_OFFSET(::rum::test::proto::Number, l2_),
  PROTOBUF_FIELD_OFFSET(::rum::test::proto::Number, d1_),
  PROTOBUF_FIELD_OFFSET(::rum::test::proto::Number, d2_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::rum::test::proto::Number)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rum::test::proto::_Number_default_instance_),
};

const char descriptor_table_protodef_test_5fnumber_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021test_number.proto\022\016rum.test.proto\"P\n\006N"
  "umber\022\n\n\002n1\030\001 \001(\005\022\n\n\002n2\030\002 \001(\005\022\n\n\002l1\030\003 \001("
  "\004\022\n\n\002l2\030\004 \001(\004\022\n\n\002d1\030\005 \001(\001\022\n\n\002d2\030\006 \001(\001b\006p"
  "roto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_test_5fnumber_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_5fnumber_2eproto = {
  false, false, 125, descriptor_table_protodef_test_5fnumber_2eproto, "test_number.proto", 
  &descriptor_table_test_5fnumber_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_test_5fnumber_2eproto::offsets,
  file_level_metadata_test_5fnumber_2eproto, file_level_enum_descriptors_test_5fnumber_2eproto, file_level_service_descriptors_test_5fnumber_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_test_5fnumber_2eproto_getter() {
  return &descriptor_table_test_5fnumber_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_test_5fnumber_2eproto(&descriptor_table_test_5fnumber_2eproto);
namespace rum {
namespace test {
namespace proto {

// ===================================================================

class Number::_Internal {
 public:
};

Number::Number(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rum.test.proto.Number)
}
Number::Number(const Number& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&n1_, &from.n1_,
    static_cast<size_t>(reinterpret_cast<char*>(&d2_) -
    reinterpret_cast<char*>(&n1_)) + sizeof(d2_));
  // @@protoc_insertion_point(copy_constructor:rum.test.proto.Number)
}

inline void Number::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&n1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&d2_) -
    reinterpret_cast<char*>(&n1_)) + sizeof(d2_));
}

Number::~Number() {
  // @@protoc_insertion_point(destructor:rum.test.proto.Number)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Number::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Number::ArenaDtor(void* object) {
  Number* _this = reinterpret_cast< Number* >(object);
  (void)_this;
}
void Number::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Number::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Number::Clear() {
// @@protoc_insertion_point(message_clear_start:rum.test.proto.Number)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&n1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&d2_) -
      reinterpret_cast<char*>(&n1_)) + sizeof(d2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Number::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 n1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          n1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 n2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          n2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 l1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          l1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 l2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          l2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double d1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          d1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double d2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          d2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Number::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rum.test.proto.Number)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 n1 = 1;
  if (this->_internal_n1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_n1(), target);
  }

  // int32 n2 = 2;
  if (this->_internal_n2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_n2(), target);
  }

  // uint64 l1 = 3;
  if (this->_internal_l1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_l1(), target);
  }

  // uint64 l2 = 4;
  if (this->_internal_l2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_l2(), target);
  }

  // double d1 = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_d1 = this->_internal_d1();
  uint64_t raw_d1;
  memcpy(&raw_d1, &tmp_d1, sizeof(tmp_d1));
  if (raw_d1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_d1(), target);
  }

  // double d2 = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_d2 = this->_internal_d2();
  uint64_t raw_d2;
  memcpy(&raw_d2, &tmp_d2, sizeof(tmp_d2));
  if (raw_d2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_d2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rum.test.proto.Number)
  return target;
}

size_t Number::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rum.test.proto.Number)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 n1 = 1;
  if (this->_internal_n1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_n1());
  }

  // int32 n2 = 2;
  if (this->_internal_n2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_n2());
  }

  // uint64 l1 = 3;
  if (this->_internal_l1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_l1());
  }

  // uint64 l2 = 4;
  if (this->_internal_l2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_l2());
  }

  // double d1 = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_d1 = this->_internal_d1();
  uint64_t raw_d1;
  memcpy(&raw_d1, &tmp_d1, sizeof(tmp_d1));
  if (raw_d1 != 0) {
    total_size += 1 + 8;
  }

  // double d2 = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_d2 = this->_internal_d2();
  uint64_t raw_d2;
  memcpy(&raw_d2, &tmp_d2, sizeof(tmp_d2));
  if (raw_d2 != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Number::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Number::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Number::GetClassData() const { return &_class_data_; }

void Number::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Number *>(to)->MergeFrom(
      static_cast<const Number &>(from));
}


void Number::MergeFrom(const Number& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rum.test.proto.Number)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_n1() != 0) {
    _internal_set_n1(from._internal_n1());
  }
  if (from._internal_n2() != 0) {
    _internal_set_n2(from._internal_n2());
  }
  if (from._internal_l1() != 0) {
    _internal_set_l1(from._internal_l1());
  }
  if (from._internal_l2() != 0) {
    _internal_set_l2(from._internal_l2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_d1 = from._internal_d1();
  uint64_t raw_d1;
  memcpy(&raw_d1, &tmp_d1, sizeof(tmp_d1));
  if (raw_d1 != 0) {
    _internal_set_d1(from._internal_d1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_d2 = from._internal_d2();
  uint64_t raw_d2;
  memcpy(&raw_d2, &tmp_d2, sizeof(tmp_d2));
  if (raw_d2 != 0) {
    _internal_set_d2(from._internal_d2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Number::CopyFrom(const Number& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rum.test.proto.Number)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Number::IsInitialized() const {
  return true;
}

void Number::InternalSwap(Number* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Number, d2_)
      + sizeof(Number::d2_)
      - PROTOBUF_FIELD_OFFSET(Number, n1_)>(
          reinterpret_cast<char*>(&n1_),
          reinterpret_cast<char*>(&other->n1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Number::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_5fnumber_2eproto_getter, &descriptor_table_test_5fnumber_2eproto_once,
      file_level_metadata_test_5fnumber_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace test
}  // namespace rum
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rum::test::proto::Number* Arena::CreateMaybeMessage< ::rum::test::proto::Number >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rum::test::proto::Number >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
