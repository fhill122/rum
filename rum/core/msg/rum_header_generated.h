// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RUMHEADER_RUM_MSG_H_
#define FLATBUFFERS_GENERATED_RUMHEADER_RUM_MSG_H_

#include "flatbuffers/flatbuffers.h"

#include "rum_common_generated.h"

namespace rum {
namespace msg {

struct ReqInfo;
struct ReqInfoBuilder;

struct RepInfo;
struct RepInfoBuilder;

struct MsgHeader;
struct MsgHeaderBuilder;

enum MsgType {
  MsgType_Interrupt = 0,
  MsgType_Message = 1,
  MsgType_ServiceRequest = 2,
  MsgType_ServiceResponse = 3,
  MsgType_MIN = MsgType_Interrupt,
  MsgType_MAX = MsgType_ServiceResponse
};

inline const MsgType (&EnumValuesMsgType())[4] {
  static const MsgType values[] = {
    MsgType_Interrupt,
    MsgType_Message,
    MsgType_ServiceRequest,
    MsgType_ServiceResponse
  };
  return values;
}

inline const char * const *EnumNamesMsgType() {
  static const char * const names[5] = {
    "Interrupt",
    "Message",
    "ServiceRequest",
    "ServiceResponse",
    nullptr
  };
  return names;
}

inline const char *EnumNameMsgType(MsgType e) {
  if (flatbuffers::IsOutRange(e, MsgType_Interrupt, MsgType_ServiceResponse)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMsgType()[index];
}

enum ExtraInfo {
  ExtraInfo_NONE = 0,
  ExtraInfo_ReqInfo = 1,
  ExtraInfo_RepInfo = 2,
  ExtraInfo_MIN = ExtraInfo_NONE,
  ExtraInfo_MAX = ExtraInfo_RepInfo
};

inline const ExtraInfo (&EnumValuesExtraInfo())[3] {
  static const ExtraInfo values[] = {
    ExtraInfo_NONE,
    ExtraInfo_ReqInfo,
    ExtraInfo_RepInfo
  };
  return values;
}

inline const char * const *EnumNamesExtraInfo() {
  static const char * const names[4] = {
    "NONE",
    "ReqInfo",
    "RepInfo",
    nullptr
  };
  return names;
}

inline const char *EnumNameExtraInfo(ExtraInfo e) {
  if (flatbuffers::IsOutRange(e, ExtraInfo_NONE, ExtraInfo_RepInfo)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesExtraInfo()[index];
}

template<typename T> struct ExtraInfoTraits {
  static const ExtraInfo enum_value = ExtraInfo_NONE;
};

template<> struct ExtraInfoTraits<rum::msg::ReqInfo> {
  static const ExtraInfo enum_value = ExtraInfo_ReqInfo;
};

template<> struct ExtraInfoTraits<rum::msg::RepInfo> {
  static const ExtraInfo enum_value = ExtraInfo_RepInfo;
};

bool VerifyExtraInfo(flatbuffers::Verifier &verifier, const void *obj, ExtraInfo type);
bool VerifyExtraInfoVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct ReqInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ReqInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_ID = 4,
    VT_ID = 6
  };
  const flatbuffers::String *client_id() const {
    return GetPointer<const flatbuffers::String *>(VT_CLIENT_ID);
  }
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLIENT_ID) &&
           verifier.VerifyString(client_id()) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct ReqInfoBuilder {
  typedef ReqInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_client_id(flatbuffers::Offset<flatbuffers::String> client_id) {
    fbb_.AddOffset(ReqInfo::VT_CLIENT_ID, client_id);
  }
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(ReqInfo::VT_ID, id, 0);
  }
  explicit ReqInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ReqInfoBuilder &operator=(const ReqInfoBuilder &);
  flatbuffers::Offset<ReqInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ReqInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<ReqInfo> CreateReqInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> client_id = 0,
    uint32_t id = 0) {
  ReqInfoBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_client_id(client_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<ReqInfo> CreateReqInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *client_id = nullptr,
    uint32_t id = 0) {
  auto client_id__ = client_id ? _fbb.CreateString(client_id) : 0;
  return rum::msg::CreateReqInfo(
      _fbb,
      client_id__,
      id);
}

struct RepInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RepInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4,
    VT_ID = 6
  };
  int8_t status() const {
    return GetField<int8_t>(VT_STATUS, 0);
  }
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_STATUS) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct RepInfoBuilder {
  typedef RepInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status(int8_t status) {
    fbb_.AddElement<int8_t>(RepInfo::VT_STATUS, status, 0);
  }
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(RepInfo::VT_ID, id, 0);
  }
  explicit RepInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RepInfoBuilder &operator=(const RepInfoBuilder &);
  flatbuffers::Offset<RepInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RepInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<RepInfo> CreateRepInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    int8_t status = 0,
    uint32_t id = 0) {
  RepInfoBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_status(status);
  return builder_.Finish();
}

struct MsgHeader FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MsgHeaderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_NAME = 6,
    VT_PROTOCAL = 8,
    VT_EXTRA_TYPE = 10,
    VT_EXTRA = 12
  };
  rum::msg::MsgType type() const {
    return static_cast<rum::msg::MsgType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *protocal() const {
    return GetPointer<const flatbuffers::String *>(VT_PROTOCAL);
  }
  rum::msg::ExtraInfo extra_type() const {
    return static_cast<rum::msg::ExtraInfo>(GetField<uint8_t>(VT_EXTRA_TYPE, 0));
  }
  const void *extra() const {
    return GetPointer<const void *>(VT_EXTRA);
  }
  template<typename T> const T *extra_as() const;
  const rum::msg::ReqInfo *extra_as_ReqInfo() const {
    return extra_type() == rum::msg::ExtraInfo_ReqInfo ? static_cast<const rum::msg::ReqInfo *>(extra()) : nullptr;
  }
  const rum::msg::RepInfo *extra_as_RepInfo() const {
    return extra_type() == rum::msg::ExtraInfo_RepInfo ? static_cast<const rum::msg::RepInfo *>(extra()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_PROTOCAL) &&
           verifier.VerifyString(protocal()) &&
           VerifyField<uint8_t>(verifier, VT_EXTRA_TYPE) &&
           VerifyOffset(verifier, VT_EXTRA) &&
           VerifyExtraInfo(verifier, extra(), extra_type()) &&
           verifier.EndTable();
  }
};

template<> inline const rum::msg::ReqInfo *MsgHeader::extra_as<rum::msg::ReqInfo>() const {
  return extra_as_ReqInfo();
}

template<> inline const rum::msg::RepInfo *MsgHeader::extra_as<rum::msg::RepInfo>() const {
  return extra_as_RepInfo();
}

struct MsgHeaderBuilder {
  typedef MsgHeader Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(rum::msg::MsgType type) {
    fbb_.AddElement<int8_t>(MsgHeader::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(MsgHeader::VT_NAME, name);
  }
  void add_protocal(flatbuffers::Offset<flatbuffers::String> protocal) {
    fbb_.AddOffset(MsgHeader::VT_PROTOCAL, protocal);
  }
  void add_extra_type(rum::msg::ExtraInfo extra_type) {
    fbb_.AddElement<uint8_t>(MsgHeader::VT_EXTRA_TYPE, static_cast<uint8_t>(extra_type), 0);
  }
  void add_extra(flatbuffers::Offset<void> extra) {
    fbb_.AddOffset(MsgHeader::VT_EXTRA, extra);
  }
  explicit MsgHeaderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MsgHeaderBuilder &operator=(const MsgHeaderBuilder &);
  flatbuffers::Offset<MsgHeader> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MsgHeader>(end);
    return o;
  }
};

inline flatbuffers::Offset<MsgHeader> CreateMsgHeader(
    flatbuffers::FlatBufferBuilder &_fbb,
    rum::msg::MsgType type = rum::msg::MsgType_Interrupt,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> protocal = 0,
    rum::msg::ExtraInfo extra_type = rum::msg::ExtraInfo_NONE,
    flatbuffers::Offset<void> extra = 0) {
  MsgHeaderBuilder builder_(_fbb);
  builder_.add_extra(extra);
  builder_.add_protocal(protocal);
  builder_.add_name(name);
  builder_.add_extra_type(extra_type);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<MsgHeader> CreateMsgHeaderDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    rum::msg::MsgType type = rum::msg::MsgType_Interrupt,
    const char *name = nullptr,
    const char *protocal = nullptr,
    rum::msg::ExtraInfo extra_type = rum::msg::ExtraInfo_NONE,
    flatbuffers::Offset<void> extra = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto protocal__ = protocal ? _fbb.CreateString(protocal) : 0;
  return rum::msg::CreateMsgHeader(
      _fbb,
      type,
      name__,
      protocal__,
      extra_type,
      extra);
}

inline bool VerifyExtraInfo(flatbuffers::Verifier &verifier, const void *obj, ExtraInfo type) {
  switch (type) {
    case ExtraInfo_NONE: {
      return true;
    }
    case ExtraInfo_ReqInfo: {
      auto ptr = reinterpret_cast<const rum::msg::ReqInfo *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ExtraInfo_RepInfo: {
      auto ptr = reinterpret_cast<const rum::msg::RepInfo *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyExtraInfoVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyExtraInfo(
        verifier,  values->Get(i), types->GetEnum<ExtraInfo>(i))) {
      return false;
    }
  }
  return true;
}

inline const rum::msg::MsgHeader *GetMsgHeader(const void *buf) {
  return flatbuffers::GetRoot<rum::msg::MsgHeader>(buf);
}

inline const rum::msg::MsgHeader *GetSizePrefixedMsgHeader(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<rum::msg::MsgHeader>(buf);
}

inline bool VerifyMsgHeaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<rum::msg::MsgHeader>(nullptr);
}

inline bool VerifySizePrefixedMsgHeaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<rum::msg::MsgHeader>(nullptr);
}

inline void FinishMsgHeaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<rum::msg::MsgHeader> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMsgHeaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<rum::msg::MsgHeader> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace msg
}  // namespace rum

#endif  // FLATBUFFERS_GENERATED_RUMHEADER_RUM_MSG_H_
