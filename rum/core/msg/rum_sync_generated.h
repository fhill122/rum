// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RUMSYNC_RUM_MSG_H_
#define FLATBUFFERS_GENERATED_RUMSYNC_RUM_MSG_H_

#include "flatbuffers/flatbuffers.h"

namespace rum {
namespace msg {

struct SubscriberInfo;
struct SubscriberInfoBuilder;

struct NodeId;
struct NodeIdBuilder;

struct SyncBroadcast;
struct SyncBroadcastBuilder;

enum SyncType {
  SyncType_Add = 0,
  SyncType_Remove = 1,
  SyncType_Whole = 2,
  SyncType_MIN = SyncType_Add,
  SyncType_MAX = SyncType_Whole
};

inline const SyncType (&EnumValuesSyncType())[3] {
  static const SyncType values[] = {
    SyncType_Add,
    SyncType_Remove,
    SyncType_Whole
  };
  return values;
}

inline const char * const *EnumNamesSyncType() {
  static const char * const names[4] = {
    "Add",
    "Remove",
    "Whole",
    nullptr
  };
  return names;
}

inline const char *EnumNameSyncType(SyncType e) {
  if (flatbuffers::IsOutRange(e, SyncType_Add, SyncType_Whole)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSyncType()[index];
}

struct SubscriberInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SubscriberInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOPIC = 4,
    VT_PROTOCOL = 6
  };
  const flatbuffers::String *topic() const {
    return GetPointer<const flatbuffers::String *>(VT_TOPIC);
  }
  const flatbuffers::String *protocol() const {
    return GetPointer<const flatbuffers::String *>(VT_PROTOCOL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TOPIC) &&
           verifier.VerifyString(topic()) &&
           VerifyOffset(verifier, VT_PROTOCOL) &&
           verifier.VerifyString(protocol()) &&
           verifier.EndTable();
  }
};

struct SubscriberInfoBuilder {
  typedef SubscriberInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_topic(flatbuffers::Offset<flatbuffers::String> topic) {
    fbb_.AddOffset(SubscriberInfo::VT_TOPIC, topic);
  }
  void add_protocol(flatbuffers::Offset<flatbuffers::String> protocol) {
    fbb_.AddOffset(SubscriberInfo::VT_PROTOCOL, protocol);
  }
  explicit SubscriberInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SubscriberInfoBuilder &operator=(const SubscriberInfoBuilder &);
  flatbuffers::Offset<SubscriberInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SubscriberInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<SubscriberInfo> CreateSubscriberInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> topic = 0,
    flatbuffers::Offset<flatbuffers::String> protocol = 0) {
  SubscriberInfoBuilder builder_(_fbb);
  builder_.add_protocol(protocol);
  builder_.add_topic(topic);
  return builder_.Finish();
}

inline flatbuffers::Offset<SubscriberInfo> CreateSubscriberInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *topic = nullptr,
    const char *protocol = nullptr) {
  auto topic__ = topic ? _fbb.CreateString(topic) : 0;
  auto protocol__ = protocol ? _fbb.CreateString(protocol) : 0;
  return rum::msg::CreateSubscriberInfo(
      _fbb,
      topic__,
      protocol__);
}

struct NodeId FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NodeIdBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NID = 4,
    VT_PID = 6,
    VT_TCP_ADDR = 8,
    VT_IPC_ADDR = 10,
    VT_NAME = 12
  };
  int32_t nid() const {
    return GetField<int32_t>(VT_NID, 0);
  }
  int32_t pid() const {
    return GetField<int32_t>(VT_PID, 0);
  }
  const flatbuffers::String *tcp_addr() const {
    return GetPointer<const flatbuffers::String *>(VT_TCP_ADDR);
  }
  const flatbuffers::String *ipc_addr() const {
    return GetPointer<const flatbuffers::String *>(VT_IPC_ADDR);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_NID) &&
           VerifyField<int32_t>(verifier, VT_PID) &&
           VerifyOffset(verifier, VT_TCP_ADDR) &&
           verifier.VerifyString(tcp_addr()) &&
           VerifyOffset(verifier, VT_IPC_ADDR) &&
           verifier.VerifyString(ipc_addr()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct NodeIdBuilder {
  typedef NodeId Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_nid(int32_t nid) {
    fbb_.AddElement<int32_t>(NodeId::VT_NID, nid, 0);
  }
  void add_pid(int32_t pid) {
    fbb_.AddElement<int32_t>(NodeId::VT_PID, pid, 0);
  }
  void add_tcp_addr(flatbuffers::Offset<flatbuffers::String> tcp_addr) {
    fbb_.AddOffset(NodeId::VT_TCP_ADDR, tcp_addr);
  }
  void add_ipc_addr(flatbuffers::Offset<flatbuffers::String> ipc_addr) {
    fbb_.AddOffset(NodeId::VT_IPC_ADDR, ipc_addr);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(NodeId::VT_NAME, name);
  }
  explicit NodeIdBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  NodeIdBuilder &operator=(const NodeIdBuilder &);
  flatbuffers::Offset<NodeId> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NodeId>(end);
    return o;
  }
};

inline flatbuffers::Offset<NodeId> CreateNodeId(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t nid = 0,
    int32_t pid = 0,
    flatbuffers::Offset<flatbuffers::String> tcp_addr = 0,
    flatbuffers::Offset<flatbuffers::String> ipc_addr = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  NodeIdBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_ipc_addr(ipc_addr);
  builder_.add_tcp_addr(tcp_addr);
  builder_.add_pid(pid);
  builder_.add_nid(nid);
  return builder_.Finish();
}

inline flatbuffers::Offset<NodeId> CreateNodeIdDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t nid = 0,
    int32_t pid = 0,
    const char *tcp_addr = nullptr,
    const char *ipc_addr = nullptr,
    const char *name = nullptr) {
  auto tcp_addr__ = tcp_addr ? _fbb.CreateString(tcp_addr) : 0;
  auto ipc_addr__ = ipc_addr ? _fbb.CreateString(ipc_addr) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return rum::msg::CreateNodeId(
      _fbb,
      nid,
      pid,
      tcp_addr__,
      ipc_addr__,
      name__);
}

struct SyncBroadcast FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SyncBroadcastBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NODE = 4,
    VT_VERSION = 6,
    VT_TYPE = 8,
    VT_SUBSCRIBERS = 10,
    VT_CLIENTS = 12
  };
  const rum::msg::NodeId *node() const {
    return GetPointer<const rum::msg::NodeId *>(VT_NODE);
  }
  uint64_t version() const {
    return GetField<uint64_t>(VT_VERSION, 0);
  }
  rum::msg::SyncType type() const {
    return static_cast<rum::msg::SyncType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const flatbuffers::Vector<flatbuffers::Offset<rum::msg::SubscriberInfo>> *subscribers() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<rum::msg::SubscriberInfo>> *>(VT_SUBSCRIBERS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<rum::msg::SubscriberInfo>> *clients() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<rum::msg::SubscriberInfo>> *>(VT_CLIENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NODE) &&
           verifier.VerifyTable(node()) &&
           VerifyField<uint64_t>(verifier, VT_VERSION) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_SUBSCRIBERS) &&
           verifier.VerifyVector(subscribers()) &&
           verifier.VerifyVectorOfTables(subscribers()) &&
           VerifyOffset(verifier, VT_CLIENTS) &&
           verifier.VerifyVector(clients()) &&
           verifier.VerifyVectorOfTables(clients()) &&
           verifier.EndTable();
  }
};

struct SyncBroadcastBuilder {
  typedef SyncBroadcast Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_node(flatbuffers::Offset<rum::msg::NodeId> node) {
    fbb_.AddOffset(SyncBroadcast::VT_NODE, node);
  }
  void add_version(uint64_t version) {
    fbb_.AddElement<uint64_t>(SyncBroadcast::VT_VERSION, version, 0);
  }
  void add_type(rum::msg::SyncType type) {
    fbb_.AddElement<int8_t>(SyncBroadcast::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_subscribers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<rum::msg::SubscriberInfo>>> subscribers) {
    fbb_.AddOffset(SyncBroadcast::VT_SUBSCRIBERS, subscribers);
  }
  void add_clients(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<rum::msg::SubscriberInfo>>> clients) {
    fbb_.AddOffset(SyncBroadcast::VT_CLIENTS, clients);
  }
  explicit SyncBroadcastBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SyncBroadcastBuilder &operator=(const SyncBroadcastBuilder &);
  flatbuffers::Offset<SyncBroadcast> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SyncBroadcast>(end);
    return o;
  }
};

inline flatbuffers::Offset<SyncBroadcast> CreateSyncBroadcast(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<rum::msg::NodeId> node = 0,
    uint64_t version = 0,
    rum::msg::SyncType type = rum::msg::SyncType_Add,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<rum::msg::SubscriberInfo>>> subscribers = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<rum::msg::SubscriberInfo>>> clients = 0) {
  SyncBroadcastBuilder builder_(_fbb);
  builder_.add_version(version);
  builder_.add_clients(clients);
  builder_.add_subscribers(subscribers);
  builder_.add_node(node);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<SyncBroadcast> CreateSyncBroadcastDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<rum::msg::NodeId> node = 0,
    uint64_t version = 0,
    rum::msg::SyncType type = rum::msg::SyncType_Add,
    const std::vector<flatbuffers::Offset<rum::msg::SubscriberInfo>> *subscribers = nullptr,
    const std::vector<flatbuffers::Offset<rum::msg::SubscriberInfo>> *clients = nullptr) {
  auto subscribers__ = subscribers ? _fbb.CreateVector<flatbuffers::Offset<rum::msg::SubscriberInfo>>(*subscribers) : 0;
  auto clients__ = clients ? _fbb.CreateVector<flatbuffers::Offset<rum::msg::SubscriberInfo>>(*clients) : 0;
  return rum::msg::CreateSyncBroadcast(
      _fbb,
      node,
      version,
      type,
      subscribers__,
      clients__);
}

inline const rum::msg::SyncBroadcast *GetSyncBroadcast(const void *buf) {
  return flatbuffers::GetRoot<rum::msg::SyncBroadcast>(buf);
}

inline const rum::msg::SyncBroadcast *GetSizePrefixedSyncBroadcast(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<rum::msg::SyncBroadcast>(buf);
}

inline bool VerifySyncBroadcastBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<rum::msg::SyncBroadcast>(nullptr);
}

inline bool VerifySizePrefixedSyncBroadcastBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<rum::msg::SyncBroadcast>(nullptr);
}

inline void FinishSyncBroadcastBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<rum::msg::SyncBroadcast> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSyncBroadcastBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<rum::msg::SyncBroadcast> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace msg
}  // namespace rum

#endif  // FLATBUFFERS_GENERATED_RUMSYNC_RUM_MSG_H_
